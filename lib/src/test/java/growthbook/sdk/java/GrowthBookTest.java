/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package growthbook.sdk.java;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import growthbook.sdk.java.TestHelpers.TestCasesJsonHelper;
import growthbook.sdk.java.models.*;
import growthbook.sdk.java.services.GrowthBookJsonUtils;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Objects;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;

class GrowthBookTest {

    TestCasesJsonHelper helper = TestCasesJsonHelper.getInstance();
    GrowthBookJsonUtils jsonUtils = GrowthBookJsonUtils.getInstance();

    @Test
    void test_evalFeature() {
        JsonArray testCases = helper.featureTestCases();

        ArrayList<String> passedTests = new ArrayList<>();
        ArrayList<String> failedTests = new ArrayList<>();

        ArrayList<Integer> failingIndexes = new ArrayList<>();

        // Failing results (response is wrong, not just data types)
        // [6, 9, 12, 13, 14, 15, 16, 17, 21, 23]

//        GrowthBook (15/24) - equality check fails
        // Failing indexes: [4, 5, 6, 9, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23]

        for (int i = 0; i < testCases.size(); i++) {
//            if (i != 3) continue;

            JsonElement jsonElement = testCases.get(i);
            JsonArray testCase = (JsonArray) jsonElement;

            String testDescription = testCase.get(0).getAsString();
            HashMap<String, String> attributes = new HashMap<>();
            HashMap<String, Integer> forcedVariations = new HashMap<>();

            // Build context
            System.out.println("\n\n--------------------------");
            System.out.printf("Building context for index %s named %s", i, testDescription);

            JsonObject contextJson = (JsonObject) testCase.get(1);
            JsonElement features = contextJson.get("features");
            String featuresJson = "{}";
            if (features != null) {
                featuresJson = features.toString();
            }
            Context context = new Context(
                    true,
                    attributes,
                    null,
                    featuresJson,
                    forcedVariations,
                    false,
                    null
            );

            String featureKey = testCase.get(2).getAsString();

            GrowthBook subject = new GrowthBook(context);
            FeatureResult<Object> result = subject.evalFeature(featureKey);

            JsonObject expected = testCase.get(3).getAsJsonObject();

            // TODO: value
            // TODO: Fix unwrapping of numbers and strings. "1" != 1. We get string when we should get number.
            // TODO: Fix unwrapping of booleans and strings. "true" != true. We get string when we should get booleans.
            Object expectedValue = GrowthBookJsonUtils.unwrap(expected.get("value"));

            boolean expectedOn = expected.get("on").getAsBoolean();
            FeatureResultSource expectedSource = FeatureResultSource.fromString(expected.get("source").getAsString());

            Object unwrappedExpected = GrowthBookJsonUtils.unwrap(expectedValue);
            Object unwrappedResultValue = GrowthBookJsonUtils.unwrap(result.getValue());
            boolean valueMatches = Objects.equals(unwrappedResultValue, unwrappedExpected);

            boolean isPassing = expectedOn == result.isOn() &&
                    expectedSource == result.getSource() &&
                    valueMatches;

            System.out.printf("\n\nüöö evalFeature - Expected value: %s == Result value: %s - Value matches %s", expectedValue, result.getValue(), valueMatches);

            if (isPassing) {
                passedTests.add(testDescription);
            } else {
                failingIndexes.add(i);
                failedTests.add(testDescription);
            }
        }

        System.out.printf("\n\n‚úÖ evalFeature - Passed tests: %s", passedTests);
        System.out.printf("\n\n\n‚ùóÔ∏è evalFeature - Failed tests = %s / %s . Failing = %s", failedTests.size(), testCases.size(), failedTests);
        System.out.printf("\n\n\n evalFeature - Failing indexes = %s", failingIndexes);

        assertEquals(0, failedTests.size(), "There are failing tests");
    }
    @Test
    void run_executesExperimentResultCallbacks() {
        GrowthBook subject = new GrowthBook();
        ExperimentRunCallback mockCallback = mock(ExperimentRunCallback.class);
        Experiment<String> mockExperiment = Experiment.<String>builder().build();

        subject.run(mockExperiment);

        // TODO: Update arg to the expect result, if possible?
        verify(mockCallback).onRun(any());
    }
}
